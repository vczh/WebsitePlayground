<article>
    <topic>
        <title>Welcome to Gaclib!</title>
        <p>
            Gaclib is a GPU accelerated C++ User Interface library.
            You can find it at <a href="https://github.com/vczh-libraries/Release">github</a>.
            This library provide many useful features.
            If you don't need all features,
            you can just use a subset of released C++ files to reduce the size of the executable.
        </p>
        <p>
            More and more developers are using this library to create their applications!
            You could check out <a href="http://www.majorav.com">majorav.com</a>,
            which is a very impressive example.
            Scroll to the end to see screenshots!
        </p>
        <topic>
            <title>Basic C++ Construction</title>
            <p>
                <ul>
                    <li><b>Vlpp.h/cpp</b></li>
                </ul>
            </p>
            <p>
                Much more easier to deal with data.
                <ul>
                    <li>string</li>
                    <li>shared pointer</li>
                    <li>functional constructions</li>
                    <li>containers and Linq</li>
                    <li>simple console read/write operations</li>
                    <li>simple unit test framework</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>OS Abstraction</title>
            <p>
                <ul>
                    <li><b>VlppOS.h/cpp</b></li>
                </ul>
            </p>
            <p>
                Access basic OS features easily:
                <ul>
                    <li>system locale access</li>
                    <li>threading and synchronization</li>
                    <li>HTTP client (Windows only)</li>
                    <li>file access</li>
                    <li>text encoding detection, serialization and deserialization</li>
                    <li>streaming and redirection</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Regular Expression</title>
            <p>
                <ul>
                    <li><b>VlppRegex.h/cpp</b></li>
                </ul>
            </p>
            <p>
                A fast C++ regular expression implementation:
                <ul>
                    <li>No backtracking at all regardless how you write the regular expression, if no capturing is required.</li>
                    <li>Matching multiple regular expressions at the same time, if no capturing is required.</li>
                    <li>Easy to build your lexical analyzer.</li>
                    <li>Anonymous capturing and named capturing</li>
                    <li>Sub-expression renaming</li>
                </ul>
            </p>
            <p>
                <b>IMPORTANT:</b>
                This regular expression library has little but critical differences about character escaping,
                comparing to other regular expression implementation:
                <ul>
                    <li><b>"."</b> matches the "." character</li>
                    <li><b>"\."</b> matches any character</li>
                    <li>
                        <b>both "\" and "/"</b> starts a character escaping,
                        which means <b>"\d+"</b> and <b>"/d+"</b> are exactly the same.
                        This helps a lot when a regular expression is written in C++ string literal.
                    </li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Parser Generator</title>
            <p>
                <ul>
                    <li><b>VlppParser.h/cpp</b></li>
                </ul>
            </p>
            <p>
                A GLR parser generator for C++.
                This library will be re-shaped in GacUI 2.0.
            </p>
            <p>
                You are able to write the syntax in a text file,
                and then run <name>ParserGen.exe</name> to generated parser, AST with traverse algorithms in C++.
                You also automatically get predefined parsers and printers for <b>XML and JSON</b>.
            </p>
        </topic>
        <topic>
            <title>Reflection</title>
            <p>
                <ul>
                    <li><b>VlppReflection.h/cpp</b></li>
                </ul>
            </p>
            <p>
                C++ Reflection supports.
                Reflection supports
                <ul>
                    <li>primitive types</li>
                    <li>strings</li>
                    <li>functions</li>
                    <li>raw or shared pointers</li>
                    <li>containers</li>
                    <li>structs</li>
                    <li>classes</li>
                    <li>interfaces</li>
                    <li>enums</li>
                </ul>
            </p>
            <p>
                For classes, you need to inherit <name>vl::reflection::Description&lt;YourClass&gt;</name> or <name>vl::reflection::AggregatableDescription&lt;YourClass&gt;</name> to enable reflection.
                For interfaces, you need to inherit <name>vl::reflection::IDescriptable</name> to enable reflection.
                At the end, a set of macros need to be called to register all reflectable types and members.
            </p>
        </topic>
        <topic>
            <title>The Workflow Script Language</title>
            <p>
                <ul>
                    <li><b>VlppWorkflowLibrary.h/cpp</b></li>
                    <li> <b>VlppWorkflowRuntime.h/cpp</b></li>
                    <li><b>VlppWorkflowCompiler.h/cpp</b> </li>
                </ul>
            </p>
            <p>
                Workflow is a script language that target on C++ inter-operation.
                After compiling the script, you are able to:
                <ul>
                    <li>Execute the script directly.</li>
                    <li>Save or load the compiled binary.</li>
                    <li>
                        Generate the script to C++ code to get a significant performance improvement,
                        without having to take the runtime.
                    </li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Cross platform GPU Accelerated UI Library</title>
            <p>
                <ul>
                    <li><b>GacUI.h/cpp</b> </li>
                    <li><b>GacUIWindows.h/cpp</b></li>
                    <li><b>GacUIReflection.h/cpp</b></li>
                    <li><b>GacUICompiler.h/cpp</b></li>
                    <li><b>DarkSkin.h/cpp</b> </li>
                    <li><b>DarkSkinReflection.h/cpp</b></li>
                </ul>
            </p>
            <p>
                GacUI has a high performance and extensible framework,
                to enable porting to different platform using different rendering engine.
                Windows is ready, macOS and Linux support will be done in 2.0.
            </p>
            <p>
                GacUI also has a rich set of layouts, controls, skins and data bindings.
                <ul>
                    <li>
                        Layouts
                        <ul>
                            <li>
                                <b>Bounds</b>: Stick to some or all sides of the parent layout,
                                with the ability to do absolute layout.
                            </li>
                            <li>
                                <b>Stack</b>: Stack sub-layouts together in different directions.
                            </li>
                            <li>
                                <b>Flow</b>: Place sub-layouts in one line, and when the space of the parent layout is not enough,
                                new lines will be created automatically.
                                This can be done in different directions.
                            </li>
                            <li>
                                <b>Table</b>: Place sub-layouts in a table,
                                with different row/column configurations to perform a very flexible layout.
                                Table is used widely in GacUI,
                                and the performance is super high,
                                you don't even need to worry about slowing down your application by putting too many layouts in nested tables.
                            </li>
                            <li>
                                <b>Side and PartialView</b>: Place sub-layouts and expand them to a specified percentage of the space of the parent layout.
                            </li>
                            <li>
                                <b>SharedSizeItem and SharedSizeRoot</b>: Control sub-layouts in different layouts to have the same width or height.
                                It is very useful when you need to align icons, texts and shortcuts in a menu,
                                but they cannot just be put in a table,
                                because icon, text and shortcut are grouped by menu item controls.
                            </li>
                            <li>
                                <b>RepeatStack and RepeatFlow</b>: Bindable Stack and Flow layout.
                            </li>
                            <li>
                                <b>Responsive</b>: Place sub-layouts in a Responsive layout,
                                and when the size of the responsive layout get changed,
                                sub-layouts will be organized differently with different appearance,
                                according to how large the space is given.
                                Ribbon controls are a very good example of using Responsive layout.
                            </li>
                        </ul>
                    </li>
                    <li>
                        Controls
                        <ul>
                            <li>Window, Tooltip, CustomControl</li>
                            <li>Button, CheckBox, RadioButton, GroupBox, Label</li>
                            <li>Scroll, Tracker, ScrollView, ProgressBar, Tab</li>
                            <li>DatePicker, DateComboBox</li>
                            <li>TextList, CheckList, RadioList, ListView, TreeView, DataGrid, ComboBox</li>
                            <li>SinglelineTextBox, MultilineTextBox</li>
                            <li>DocumentLabel, DocumentTextBox, DocumentViewer</li>
                            <li>ToolstripMenuBar, ToolstripToolBar, ToolstripButton, ToolstripDropDownButton, ToolstripSplitButton, ToolstripSplitter</li>
                            <li>RibbonTab, RibbonGroup, RibbonIconLabel, RibbonSmallIconlabel, RibbonButtons, RibbonToolstrips, RibbonGallery, RibbonToolstripMenu</li>
                            <li>RibbonGallery, RibbonGalleryList, RibbonGalleryItemList</li>
                            <li>RibbonSmallButton, RibbonSmallDropdownButton, RibbonSmallSplitButton, RibbonLargeButton, RibbonLargeDropdownButton, RibbonLargeSplitButton</li>
                            <li>RibbonSplitter, RibbonToolstripHeader</li>
                        </ul>
                    </li>
                    <li>
                        <p>
                            Skins: GacUI is released with DarkSkin as a default skin.
                            You could create your own skin, or just use DarkSkin to create your application.
                            Please note that a GacUI application has to start with a skin.
                        </p>
                    </li>
                    <li>
                        <p>
                            Data Bindings: GacUI has a very powerful data binding feature.
                            You are able to create windows, layouts, controls and skins in XML,
                            define view models in Workflow,
                            bind view model properties to GacUI controls bidirectionally using complex expressions that you could even not imagine,
                            implement view models in C++,
                            and finally bring them together to work.
                        </p>
                    </li>
                </ul>
            </p>
            <p>
                Demoes of full GacUI features can be found <a href="./Demo.html">here</a>.
            </p>
        </topic>
    </topic>
</article>